use anyhow::Result;
use bs58;
use serde::{Deserialize, Serialize};
use solana_sdk::signature::Keypair;

/// üîê –î–µ–∫–æ–¥–∏—Ä—É–µ–º base58 –ø—Ä–∏–≤–∞—Ç–Ω–∏–∫ –≤ Keypair
pub fn decode_keypair(base58_str: &str) -> Result<Keypair> {
    let bytes = bs58::decode(base58_str).into_vec()?;
    let keypair = Keypair::from_bytes(&bytes)?;
    Ok(keypair)
}

/// ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON-–æ—Ç–≤–µ—Ç–∞
#[derive(Debug, Serialize)]
struct SwapResult {
    success: bool,
    txid: Option<String>,
    error: Option<String>,
}

/// üì§ –û—Ç–≤–µ—Ç —Å txid
pub fn respond_with_txid(result: Result<String>) {
    let response = match result {
        Ok(txid) => SwapResult {
            success: true,
            txid: Some(txid),
            error: None,
        },
        Err(e) => SwapResult {
            success: false,
            txid: None,
            error: Some(e.to_string()),
        },
    };

    println!("{}", serde_json::to_string(&response).unwrap());
}

/// üì§ –û—Ç–≤–µ—Ç –±–µ–∑ txid
pub fn respond_empty(result: Result<()>) {
    let response = match result {
        Ok(_) => SwapResult {
            success: true,
            txid: None,
            error: None,
        },
        Err(e) => SwapResult {
            success: false,
            txid: None,
            error: Some(e.to_string()),
        },
    };

    println!("{}", serde_json::to_string(&response).unwrap());
}

/// üí∏ –ü–µ—Ä–µ–≤–æ–¥ SOL ‚Üí –ª–∞–º–ø–æ—Ä—Ç—ã (1 SOL = 1_000_000_000 lamports)
pub fn sol_to_lamports(sol: f64) -> u64 {
    (sol * 1_000_000_000.0) as u64
}

/// üí∞ –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é 0.0032 SOL –∏–∑ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–≤ –ª–∞–º–ø–æ—Ä—Ç–∞—Ö)
pub fn deduct_swap_fee(sol_balance: u64) -> u64 {
    const FEE_LAMPORTS: u64 = 4_500_000;
    sol_balance.saturating_sub(FEE_LAMPORTS)
}

/// üì• –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π JSON-–≤—Ö–æ–¥ –æ—Ç Python
#[derive(Debug, Serialize, Deserialize)]
pub struct JsonInput {
    pub action: String,
    pub private_key: String,
    pub amount: Option<u64>,
    pub to_address: Option<String>,
    pub ca: Option<String>,
}
